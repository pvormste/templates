import {WunderGraphContext} from "./provider";
import {useCallback, useContext, useEffect, useMemo, useState} from "react";
import {
{{- range $i, $operation := .OperationsData }}
    {{ $operation.Operation.Name }}Response,{{ if $operation.Operation.HasVariables }}
    {{ $operation.Operation.Name }}Variables,{{ end -}}
{{ end }}
    RequestConfig
} from "./client";

export const useWunderGraph = () => {
    const ctx = useContext(WunderGraphContext)
    if (ctx === undefined) {
        throw new Error("It seems you forgot to put WunderProvider at the root of your application. Otherwise there might be a but so please contact us.")
    }
    const logout = useCallback(() => {
        ctx.client.logout();
        ctx.setIsAuthenticated(ctx.client.isLoggedIn());
    }, [ctx]);
    return {
        client: ctx.client,
        isAuthenticated: ctx.isAuthenticated,
        startLogin: ctx.client.login,
        logout,
    }
}

interface OperationParams {
    requiresAuthentication: boolean
    initialVariables?: any
    operationType: OperationType,
    lazy?: boolean,
}

enum OperationType {
    "Query" = "Query",
    "Mutation" = "Mutation",
    "Subscription" = "Subscription"
}

export enum OperationState {
    "Init" = "Init",
    "Loading" = "Loading",
    "Success" = "Success",
    "Error" = "Error",
    "LazyWaitingForRefetch" = "LazyWaitingForRefetch",
    "WaitingForAuthentication" = "WaitingForAuthentication",
}

export interface QueryParams {
    lazy?: boolean
}

export interface MutationParams {}

const useQuery = <Response>(fetch: ((requestConfig?: RequestConfig) => Promise<Response>) | ((variables: any, requestConfig?: RequestConfig) => Promise<Response>), params: OperationParams) => {
    const [response, setResponse] = useState<Response>();
    const [operationState, setOperationState] = useState<OperationState>(OperationState.Init);
    const [lastRefetch, setLastRefetch] = useState<number | undefined>(undefined)
    const [variables, setVariables] = useState<any>(params.initialVariables);
    const {isAuthenticated} = useWunderGraph();
    const abortController = useMemo<AbortController>(() => new AbortController(), [lastRefetch, isAuthenticated, variables]);
    const abort = useCallback(() => {
        abortController.abort();
    }, [abortController]);
    useEffect(() => {
        if (params.requiresAuthentication && !isAuthenticated) {
            setResponse(undefined);
            setOperationState(OperationState.WaitingForAuthentication);
            return;
        }
        if (params.lazy && lastRefetch === undefined){
            setOperationState(OperationState.LazyWaitingForRefetch);
            return;
        }
        (async () => {
            setOperationState(OperationState.Loading);
            try {
                const response = variables === undefined ? await fetch({
                    abort_signal: abortController.signal,
                }) : await fetch(variables, {
                    abort_signal: abortController.signal,
                });
                if (abortController.signal.aborted) {
                    return
                }
                setOperationState(OperationState.Success);
                setResponse(response);
            } catch (e) {
                setOperationState(OperationState.Error);
                setResponse(undefined);
            }
        })();
        return () => {
            abort();
        }
    }, [isAuthenticated, lastRefetch, abortController, variables,params.lazy])
    const refetch = useCallback(() => {
        setLastRefetch(Date.now());
    }, [setLastRefetch])
    return {
        response,
        refetch,
        operationState,
        abort,
        setVariables
    }
}

const useMutation = <Response>(fetch: ((requestConfig?: RequestConfig) => Promise<Response>) | ((variables: any, requestConfig?: RequestConfig) => Promise<Response>), params: OperationParams) => {
    const [response, setResponse] = useState<Response>();
    const [operationState, setOperationState] = useState<OperationState>(OperationState.Init);
    const {isAuthenticated} = useWunderGraph();
    const abortController = useMemo<AbortController>(() => new AbortController(), [isAuthenticated]);
    const abort = useCallback(() => {
        abortController.abort();
    }, [abortController]);
    const fetchWithVariables = useCallback((variables: any) => {
        (async () => {
            if (params.requiresAuthentication && !isAuthenticated) {
                setResponse(undefined);
                setOperationState(OperationState.WaitingForAuthentication);
                return;
            }
            setOperationState(OperationState.Loading);
            try {
                const response = variables === undefined ? await fetch({
                    abort_signal: abortController.signal,
                }) : await fetch(variables, {
                    abort_signal: abortController.signal,
                });
                if (abortController.signal.aborted) {
                    return
                }
                setOperationState(OperationState.Success);
                setResponse(response);
            } catch (e) {
                setOperationState(OperationState.Error);
                setResponse(undefined);
            }
        })();
    },[isAuthenticated, abortController]);
    return {
        response,
        operationState,
        abort,
        fetchWithVariables
    }
}
{{ range $i, $operation := .OperationsData }}
export interface {{ camelcase $operation.Operation.OperationPrefix }}{{ $operation.Operation.Name }}Params extends {{ camelcase $operation.Operation.OperationPrefix }}Params { {{- if $operation.Operation.HasVariables }}
    variables: {{ $operation.Operation.Name }}Variables,
{{ end -}}}

{{ if $operation.Operation.IsQuery -}}
export const use{{ camelcase $operation.Operation.OperationPrefix }}{{ $operation.Operation.Name }} = (params{{ if not $operation.Operation.HasVariables }}?{{ end }}: {{ camelcase $operation.Operation.OperationPrefix }}{{ $operation.Operation.Name }}Params) => {
    const {client} = useWunderGraph();
    const operationParams: OperationParams = {
        operationType: OperationType.Query,
        {{ if $operation.Operation.HasVariables -}}
            initialVariables: params.variables,
        {{ end -}}
        requiresAuthentication: true,
        {{- if $operation.Operation.IsMutation }}
        lazy: true,
        {{- else }}
        lazy: params{{ if not $operation.Operation.HasVariables }}?{{ end }}.lazy === true,{{ end }}
    };
    const {response, refetch, operationState, abort{{ if $operation.Operation.HasVariables }}, setVariables{{ end }}} = useQuery<{{ $operation.Operation.Name }}Response>(client.{{ $operation.Operation.OperationPrefix }}{{ $operation.Operation.Name }}, operationParams);
    {{- if $operation.Operation.HasVariables }}
    const refetchVariables: (variables: {{ $operation.Operation.Name }}Variables) => void = useCallback((variables: {{ $operation.Operation.Name }}Variables) => {
        setVariables(variables);
    }, [setVariables]);{{ end }}
    return {
        data: response?.data,
        errors: response?.errors,
        {{- if $operation.Operation.IsQuery }}
        refetch,
        {{- end }}
        {{ if $operation.Operation.HasVariables -}}
        {{- if $operation.Operation.IsQuery -}}
        refetchVariables,
        {{- else if $operation.Operation.IsMutation -}}
        {{ $operation.Operation.Name }}: refetchVariables,
        {{- end }}
        {{ end -}}
        operationState,
        abort,
    }
}
{{ else if $operation.Operation.IsMutation -}}
export const use{{ camelcase $operation.Operation.OperationPrefix }}{{ $operation.Operation.Name }} = () => {
    const {client} = useWunderGraph();
    const operationParams: OperationParams = {
        operationType: OperationType.Mutation,
        requiresAuthentication: true,
    };
    const { response, fetchWithVariables, operationState, abort } = useMutation<{{ $operation.Operation.Name }}Response>(client.{{ $operation.Operation.OperationPrefix }}{{ $operation.Operation.Name }}, operationParams);
    return {
        data: response?.data,
        errors: response?.errors,
        {{ $operation.Operation.Name }}: fetchWithVariables,
        operationState,
        abort,
    }
}
{{ end }}
{{- end }}